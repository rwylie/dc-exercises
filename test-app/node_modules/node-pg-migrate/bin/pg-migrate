#!/usr/bin/env node
'use strict';

const util = require('util');
const yargs = require('yargs');
const Migration = require('../dist/migration').default; // eslint-disable-line import/no-unresolved,import/extensions
const runner = require('../dist/runner'); // eslint-disable-line import/no-unresolved,import/extensions
const migrationRunner = runner.default;
const unlockRunner = runner.unlockRunner;

process.on('uncaughtException', (err) => {
  console.log(err.stack);
  process.exit(1);
});

try {
  require('dotenv').load({ silent: true }); // eslint-disable-line global-require,import/no-extraneous-dependencies
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') {
    throw err;
  }
}

const schema = 'schema';
const databaseUrlVar = 'database-url-var';
const migrationsDir = 'migrations-dir';
const migrationsTable = 'migrations-table';
const migrationsSchema = 'migrations-schema';
const checkOrder = 'check-order';
const configValue = 'config-value';

const argv = yargs
  .usage('Usage: db-migrate [up|down|create|unlock] [migrationName] [options]')

  .option('d', {
    alias: databaseUrlVar,
    default: 'DATABASE_URL',
    describe: 'Name of env variable where is set the database_url',
    type: 'string',
  })

  .option('m', {
    alias: migrationsDir,
    default: `${process.cwd()}/migrations`,
    defaultDescription: 'migrations',
    describe: 'The directory containing your migration files',
    type: 'string',
  })

  .option('t', {
    alias: migrationsTable,
    default: 'pgmigrations',
    describe: 'The table storing which migrations have been run',
    type: 'string',
  })

  .option('s', {
    alias: schema,
    default: 'public',
    describe: 'The schema on which migration will be run (defaults to `public`)',
    type: 'string',
  })

  .option(migrationsSchema, {
    default: undefined,
    defaultDescription: 'Same as "schema"',
    describe: 'The schema storing table which migrations have been run',
    type: 'string',
  })

  .option('dry-run', {
    default: false,
    describe: 'Prints the SQL but doesn\'t run it',
    type: 'boolean',
  })

  .option(checkOrder, {
    default: true,
    describe: 'Check order of migrations before running them',
    type: 'boolean',
  })

  .option('i', {
    alias: 'version',
    default: false,
    describe: 'Print version info',
    type: 'boolean',
  })

  .option('config-value', {
    default: 'db',
    describe: 'Name of config section with db options',
    type: 'string',
  })

  .help()
  .argv;

if (argv.version) {
  console.log(module.exports.version);
  process.exit(0);
}

if (argv.help || argv._.length === 0) {
  yargs.showHelp();
  process.exit(1);
}

let MIGRATIONS_DIR = argv[migrationsDir];
let DATABASE_URL = process.env[argv[databaseUrlVar]];
let SCHEMA = argv[schema];
let MIGRATIONS_SCHEMA = argv[migrationsSchema];
let MIGRATIONS_TABLE = argv[migrationsTable];
let CHECK_ORDER = argv[checkOrder];

try {
  // Load config (and suppress the no-config-warning)
  process.env.SUPPRESS_NO_CONFIG_WARNING = 1;
  const config = require('config'); // eslint-disable-line global-require,import/no-extraneous-dependencies
  if (config[argv[configValue]]) {
    const db = config[argv[configValue]];
    if (typeof db === 'object') {
      SCHEMA = db[schema] || SCHEMA;
      MIGRATIONS_DIR = db[migrationsDir] || MIGRATIONS_DIR;
      MIGRATIONS_SCHEMA = db[migrationsSchema] || MIGRATIONS_SCHEMA;
      MIGRATIONS_TABLE = db[migrationsTable] || MIGRATIONS_TABLE;
      CHECK_ORDER = typeof db[checkOrder] !== 'undefined' ? db[checkOrder] : CHECK_ORDER;
      if (db.url) {
        DATABASE_URL = db.url;
      } else if (db.host || db.port || db.name) {
        const creds = `${db.user}${db.password ? `:${db.password}` : ''}`;
        DATABASE_URL = `postgres://${creds ? `${creds}@` : ''}${db.host || 'localhost'}:${db.port || 5432}/${db.name}`;
      }
    } else {
      DATABASE_URL = db;
    }
  }
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') {
    throw err;
  }
}

const action = argv._.shift();

if (action === 'create') {
  // replaces spaces with dashes - should help fix some errors
  let new_migration_name = argv._.length ? argv._.join('-') : '';
  // forces use of dashes in names - keep thing clean
  new_migration_name = new_migration_name.replace(/_ /g, '-');

  if (!new_migration_name) {
    console.log('\'migrationName\' is required.');
    yargs.showHelp();
    process.exit(1);
  }

  const migration = Migration.create(new_migration_name, MIGRATIONS_DIR);
  console.log(util.format('Created migration -- %s', migration.path));
} else if (action === 'unlock') {
  if (!DATABASE_URL) {
    console.error(`The $${argv[databaseUrlVar]} environment variable is not set.`);
    process.exit(1);
  }
  unlockRunner({
    database_url: DATABASE_URL,
    schema: SCHEMA,
    migrations_schema: MIGRATIONS_SCHEMA,
    migrations_table: MIGRATIONS_TABLE,
  })
    .then(() => {
      console.log('Unlocked!');
      process.exit(0);
    })
    .catch((err) => {
      console.log(err.stack);
      process.exit(1);
    });
} else if (action === 'up' || action === 'down') {
  if (!DATABASE_URL) {
    console.error(`The $${argv[databaseUrlVar]} environment variable is not set.`);
    process.exit(1);
  }

  const dryRun = argv['dry-run'];
  if (dryRun) {
    console.log('dry run');
  }

  const updown_arg = argv._.length ? argv._[0] : null;
  let num_migrations;
  let migration_name;

  if (updown_arg !== null) {
    if (parseInt(updown_arg, 10) == updown_arg) { // eslint-disable-line eqeqeq
      num_migrations = parseInt(updown_arg, 10);
    } else {
      migration_name = argv._.join('-').replace(/_ /g, '-');
    }
  }

  migrationRunner({
    dryRun,
    database_url: DATABASE_URL,
    dir: MIGRATIONS_DIR,
    schema: SCHEMA,
    migrations_schema: MIGRATIONS_SCHEMA,
    migrations_table: MIGRATIONS_TABLE,
    direction: action,
    count: num_migrations,
    file: migration_name,
    checkOrder: CHECK_ORDER,
  })
    .then(() => {
      console.log('Migrations complete!');
      process.exit(0);
    })
    .catch((err) => {
      console.log(err.stack);
      process.exit(1);
    });
} else {
  console.log('Invalid Action: Must be [up|down|create].');
  yargs.showHelp();
  process.exit(1);
}

if (argv['force-exit']) {
  console.log('Forcing exit');
  process.exit(0);
}
