'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alterType = exports.dropType = exports.createType = exports.dropConstraint = exports.addConstraint = exports.undoRenameColumn = exports.renameColumn = exports.undoRenameTable = exports.renameTable = exports.alterColumn = exports.dropColumns = exports.addColumns = exports.drop = exports.create = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var type_adapters = {
  int: 'integer',
  string: 'text',
  float: 'real',
  double: 'double precision',
  datetime: 'timestamp',
  bool: 'boolean'
};

// some convenience adapters -- see above
var applyTypeAdapters = function applyTypeAdapters(type) {
  return type_adapters[type] ? type_adapters[type] : type;
};

var quote = function quote(array) {
  return array.map(function (item) {
    return _utils.template`"${item}"`;
  });
};

function parseColumns(columns, table_name) {
  var columnsWithOptions = _lodash2.default.mapValues(columns, function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (typeof options === 'string') {
      options = options === 'id' // eslint-disable-line no-param-reassign
      // convenience type for serial primary keys
      ? { type: 'serial', primaryKey: true } : { type: options };
    }

    options.type = applyTypeAdapters(options.type); // eslint-disable-line no-param-reassign

    return options;
  });

  var primaryColumns = _lodash2.default.chain(columnsWithOptions).map(function (options, column_name) {
    return options.primaryKey ? column_name : null;
  }).filter().value();
  var multiplePrimaryColumns = primaryColumns.length > 1;

  if (multiplePrimaryColumns) {
    columnsWithOptions = _lodash2.default.mapValues(columnsWithOptions, function (options) {
      return _extends({}, options, { primaryKey: false });
    });
  }

  return _lodash2.default.map(columnsWithOptions, function (options, column_name) {
    var constraints = [];
    if (options.unique) {
      constraints.push('UNIQUE');
    }
    if (options.primaryKey) {
      constraints.push('PRIMARY KEY');
    }
    if (options.notNull) {
      constraints.push('NOT NULL');
    }
    if (options.check) {
      constraints.push(`CHECK (${options.check})`);
    }
    if (options.references) {
      constraints.push(`REFERENCES ${options.references}`);
      if (options.onDelete) {
        constraints.push(`ON DELETE ${options.onDelete}`);
      }
      if (options.onUpdate) {
        constraints.push(`ON UPDATE ${options.onUpdate}`);
      }
    }

    var defaultValue = options.default !== undefined ? ` DEFAULT ${(0, _utils.escapeValue)(options.default)}` : '';
    var constraintsString = constraints.length ? ` ${constraints.join(' ')}` : '';

    return _utils.template`"${column_name}" ${options.type}${defaultValue}${constraintsString}`;
  }).concat(multiplePrimaryColumns ? [`CONSTRAINT "${table_name}_pkey" PRIMARY KEY (${quote(primaryColumns).join(', ')})`] : []).join(',\n');
}

var create = exports.create = function create(table_name, columns) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  /*
   columns - hash of columns
    Options
   table_name - the name of the table
   columns - see column options
   options.inherits - table to inherit from (optional)
   */
  var columnsString = parseColumns(columns, table_name).replace(/^/gm, '  ');
  var inherits = options.inherits ? ` INHERITS ${options.inherits}` : '';
  return _utils.template`CREATE TABLE "${table_name}" (\n${columnsString}\n)${inherits};`;
};

var drop = exports.drop = function drop(table_name) {
  return _utils.template`DROP TABLE "${table_name}";`;
};

var addColumns = exports.addColumns = function addColumns(table_name, columns) {
  return _utils.template`ALTER TABLE "${table_name}"\n${parseColumns(columns, table_name).replace(/^/gm, '  ADD ')};`;
};

var dropColumns = exports.dropColumns = function dropColumns(table_name, columns) {
  if (typeof columns === 'string') {
    columns = [columns]; // eslint-disable-line no-param-reassign
  } else if (!_lodash2.default.isArray(columns) && typeof columns === 'object') {
    columns = _lodash2.default.keys(columns); // eslint-disable-line no-param-reassign
  }
  return _utils.template`ALTER TABLE "${table_name}"\n${quote(columns).join(',\n').replace(/^/gm, '  DROP ')};`;
};

var alterColumn = exports.alterColumn = function alterColumn(table_name, column_name, options) {
  var actions = [];
  if (options.default === null) {
    actions.push('DROP DEFAULT');
  } else if (options.default !== undefined) {
    actions.push(`SET DEFAULT ${(0, _utils.escapeValue)(options.default)}`);
  }
  if (options.type) {
    actions.push(`SET DATA TYPE ${applyTypeAdapters(options.type)}`);
  }
  if (options.notNull) {
    actions.push('SET NOT NULL');
  } else if (options.notNull === false || options.allowNull) {
    actions.push('DROP NOT NULL');
  }

  return _utils.template`ALTER TABLE "${table_name}"\n${actions.join(',\n').replace(/^/gm, `  ALTER "${column_name}" `)};`;
};

// RENAME
var renameTable = exports.renameTable = function renameTable(table_name, new_name) {
  return _utils.template`ALTER TABLE "${table_name}" RENAME TO "${new_name}";`;
};

var undoRenameTable = exports.undoRenameTable = function undoRenameTable(table_name, new_name) {
  return renameTable(new_name, table_name);
};

var renameColumn = exports.renameColumn = function renameColumn(table_name, column_name, new_name) {
  return _utils.template`ALTER TABLE "${table_name}" RENAME "${column_name}" TO "${new_name}";`;
};

var undoRenameColumn = exports.undoRenameColumn = function undoRenameColumn(table_name, column_name, new_name) {
  return renameColumn(table_name, new_name, column_name);
};

// CONSTRAINTS -- only supports named check constraints
var addConstraint = exports.addConstraint = function addConstraint(table_name, constraint_name, expression) {
  return _utils.template`ALTER TABLE "${table_name}" ADD${constraint_name ? ` CONSTRAINT "${constraint_name}"` : ''} ${expression};`;
};

var dropConstraint = exports.dropConstraint = function dropConstraint(table_name, constraint_name) {
  return _utils.template`ALTER TABLE "${table_name}" DROP CONSTRAINT "${constraint_name}";`;
};

var createType = exports.createType = function createType(type_name, options) {
  return _lodash2.default.isArray(options) ? _utils.template`CREATE TYPE "${type_name}" AS ENUM ('${options.join('\', \'')}');` : _utils.template`CREATE TYPE "${type_name}" AS (\n${parseColumns(options)}\n);`;
};

var dropType = exports.dropType = function dropType(type_name) {
  return _utils.template`DROP TYPE "${type_name}";`;
};

var alterType = exports.alterType = function alterType() {
  return null;
};

// setup reverse functions
create.reverse = drop;
addColumns.reverse = dropColumns;
addConstraint.reverse = dropConstraint;
createType.reverse = dropType;
renameColumn.reverse = undoRenameColumn;
renameTable.reverse = undoRenameTable;