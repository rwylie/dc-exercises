'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drop = exports.create = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function generateIndexName(table_name, columns, options) {
  return options.name ? options.name : _utils.template`${table_name}_${_lodash2.default.isArray(columns) ? columns.join('_') : columns}${options.unique ? '_unique' : ''}_index`;
}

function generateColumnsString(columns) {
  if (_lodash2.default.isArray(columns)) {
    return columns.map(function (name) {
      return _utils.template`"${name}"`;
    }).join(', ');
  }
  if (/.+\(.*\)/.test(columns)) {
    // expression
    return columns;
  }
  return _utils.template`"${columns}"`; // single column
}

var create = exports.create = function create(table_name, columns) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  /*
   columns - the column, columns, or expression to create the index on
    Options
   name - explicitly specify the name for the index
   unique - is this a unique index
   where - where clause
   concurrently -
   options.method -  [ btree | hash | gist | spgist | gin ]
   */
  var indexName = generateIndexName(table_name, columns, options);
  var columnsString = generateColumnsString(columns);
  var unique = options.unique ? ' UNIQUE ' : '';
  var concurrently = options.concurrently ? ' CONCURRENTLY ' : '';
  var method = options.method ? ` USING ${options.method}` : '';
  var where = options.where ? ` WHERE ${options.where}` : '';

  return _utils.template`CREATE ${unique} INDEX ${concurrently} "${indexName}" ON "${table_name}"${method} (${columnsString})${where};`;
};

var drop = exports.drop = function drop(table_name, columns) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return `DROP INDEX "${generateIndexName(table_name, columns, options)}";`;
};

// setup reverse functions
create.reverse = drop;